# test_spec.yaml
tests:
  #------------------------------------------
  # ヒープ管理
  #------------------------------------------
  - name: "ヒープ初期化"
    description: "heap_init() が正常に動作する"
    steps:
      - function: "heap_init"
    expected:
      result: "Heap initialized"

  - name: "メモリ割り当て"
    description: "heap_alloc() でメモリを割り当てる"
    steps:
      - function: "heap_alloc"
        args: [100]
    expected:
      result: "Memory allocated"

  - name: "メモリ解放"
    description: "heap_free() でメモリを解放する"
    steps:
      - function: "heap_free"
        args: ["ptr1"]
    expected:
      result: "Memory freed"

  #------------------------------------------
  # 字句解析（Tokenizer）
  #------------------------------------------
  - name: "トークン分割（単純な式）"
    description: "(+ 1 2) をトークンに分割できる"
    steps:
      - input: "(+ 1 2)"
        function: "tokenizer"
    expected:
      tokens: ["(", "+", "1", "2", ")"]

  - name: "ネストしたS式のトークン分割"
    description: "(* (+ 1 2) 3) のトークン分割"
    steps:
      - input: "(* (+ 1 2) 3)"
        function: "tokenizer"
    expected:
      tokens: ["(", "*", "(", "+", "1", "2", ")", "3", ")"]

  #------------------------------------------
  # パーサー（Parser）
  #------------------------------------------
  - name: "単純な加算式のAST構築"
    description: "(+ 1 2) をASTに変換"
    steps:
      - input: "(+ 1 2)"
        function: "parser"
    expected:
      ast: ["+", 1, 2]

  - name: "ネストしたAST構築"
    description: "(* (+ 1 2) 3) をASTに変換"
    steps:
      - input: "(* (+ 1 2) 3)"
        function: "parser"
    expected:
      ast: ["*", ["+", 1, 2], 3]

  #------------------------------------------
  # 評価器（Eval）
  #------------------------------------------
  - name: "加算の評価"
    description: "(+ 1 2) の評価結果が 3 になる"
    steps:
      - input: "(+ 1 2)"
        function: "eval"
    expected:
      result: 3

  - name: "四則演算の組み合わせ"
    description: "(* (+ 1 2) (- 5 3)) の結果が 6 になる"
    steps:
      - input: "(* (+ 1 2) (- 5 3))"
        function: "eval"
    expected:
      result: 6

  #------------------------------------------
  # 組み込み関数
  #------------------------------------------
  - name: "リスト生成"
    description: "(list 1 2 3) の結果が (1 2 3) になる"
    steps:
      - input: "(list 1 2 3)"
        function: "eval"
    expected:
      result: [1, 2, 3]

  - name: "car関数"
    description: "(car (list 1 2 3)) の結果が 1 になる"
    steps:
      - input: "(car (list 1 2 3))"
        function: "eval"
    expected:
      result: 1

  - name: "cdr関数"
    description: "(cdr (list 1 2 3)) の結果が (2 3) になる"
    steps:
      - input: "(cdr (list 1 2 3))"
        function: "eval"
    expected:
      result: [2, 3]

  #------------------------------------------
  # 変数定義・ラムダ
  #------------------------------------------
  - name: "変数定義と参照"
    description: "(define x 42) の後に x を評価すると 42 になる"
    steps:
      - input: "(define x 42)"
        function: "eval"
      - input: "x"
        function: "eval"
    expected:
      result: 42

  - name: "ラムダ関数の定義と呼び出し"
    description: "((lambda (a b) (+ a b)) 3 4) の結果が 7 になる"
    steps:
      - input: "((lambda (a b) (+ a b)) 3 4)"
        function: "eval"
    expected:
      result: 7  #------------------------------------------
  # ヒープ管理
  #------------------------------------------
  - name: "基本的なメモリ確保"
    description: "100バイトのメモリを確保できる"
    steps:
      - input: 100
        function: "heap_alloc"
        expected:
          result: "not_null"

  - name: "複数メモリブロックの確保"
    description: "異なるサイズのメモリを複数確保できる"
    steps:
      - input: 50
        function: "heap_alloc"
        expected:
          result: "not_null"
      - input: 100
        function: "heap_alloc"
        expected:
          result: "not_null"
      - input: 200
        function: "heap_alloc"
        expected:
          result: "not_null"

  - name: "メモリ解放と再確保"
    description: "メモリを解放した後、同じサイズを再確保できる"
    steps:
      - input: 100
        function: "heap_alloc"
        expected:
          result: "not_null"
      - input: "previous_ptr"
        function: "heap_free"
        expected:
          result: "success"
      - input: 100
        function: "heap_alloc"
        expected:
          result: "not_null"

  - name: "ゼロサイズ確保の拒否"
    description: "サイズ0のメモリ確保は失敗する"
    steps:
      - input: 0
        function: "heap_alloc"
        expected:
          result: "null"

  - name: "大きすぎるサイズ確保の拒否"
    description: "ヒープサイズを超える確保は失敗する"
    steps:
      - input: 3000
        function: "heap_alloc"
        expected:
          result: "null"
